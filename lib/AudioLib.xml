<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AudioLib</name>
    </assembly>
    <members>
        <member name="F:AudioLib.AudioLibDefs.AUDIO_FILE_TYPES">
            <summary>Supported types.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.VOLUME_MIN">
            <summary>NAudio doesn't publish this for their API.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.VOLUME_MAX">
            <summary>NAudio doesn't publish this for their API.</summary>
        </member>
        <member name="T:AudioLib.AudioPlayer">
            <summary>
            A simple audio file player.
            </summary>
        </member>
        <member name="F:AudioLib.AudioPlayer._waveOut">
            <summary>Wave output play device.</summary>
        </member>
        <member name="F:AudioLib.AudioPlayer._swapper">
            <summary>WaveOut doesn't like calling Init() more than once.</summary>
        </member>
        <member name="E:AudioLib.AudioPlayer.PlaybackStopped">
            <summary>Wave playing done.</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Valid">
            <summary>Are we ok?</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Volume">
            <summary>Volume.</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Playing">
            <summary>State.</summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.#ctor(System.String,System.Int32)">
            <summary>
            Normal constructor.
            </summary>
            <param name="wavOutDevice">Device name.</param>
            <param name="latency">How slow.</param>
        </member>
        <member name="M:AudioLib.AudioPlayer.Dispose">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.SetProvider(NAudio.Wave.ISampleProvider)">
            <summary>
            Bind the source to output.
            </summary>
            <param name="smpl"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioPlayer.Run(System.Boolean)">
            <summary>
            Start/stop everything.
            </summary>
            <param name="go">Or no.</param>
        </member>
        <member name="M:AudioLib.AudioPlayer.Rewind">
            <summary>
            Go back jack.
            </summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.WaveOut_PlaybackStopped(System.Object,NAudio.Wave.StoppedEventArgs)">
            <summary>
            Usually end of file but could be error. Client can handle.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:AudioLib.AudioSettings.LibSettings">
            <summary>Current audio settings. Client must set this before accessing!</summary>
        </member>
        <member name="T:AudioLib.FixedListTypeConverter">
            <summary>Converter for selecting property value from known lists.</summary>
        </member>
        <member name="M:AudioLib.AudioUtils.ReadAll(NAudio.Wave.ISampleProvider,System.Int32)">
            <summary>
            Make a buffer out of the provider contents.
            </summary>
            <param name="sprov">The provider.</param>
            <param name="len">Optional known length. TODO?</param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioUtils.ValidateFormat(NAudio.Wave.WaveFormat,System.Boolean)">
            <summary>
            Sanity check for only 32bit fp, 44100Hz, mono.
            </summary>
            <param name="waveFormat">Format to check.</param>
            <param name="mono">Must be mono.</param>
        </member>
        <member name="M:AudioLib.AudioUtils.Export(System.String,NAudio.Wave.AudioFileReader)">
            <summary>
            Export wave data to text file.
            </summary>
            <param name="exportFileName"></param>
            <param name="rdr">Data source.</param>
        </member>
        <member name="M:AudioLib.AudioUtils.Dump(System.Single[],System.String)">
            <summary>
            Simple dump utility.
            </summary>
            <param name="data"></param>
            <param name="fn"></param>
        </member>
        <member name="T:AudioLib.ClipSampleProvider">
            <summary>
            Provider that encapsulates a client supplied audio data subset.
            Supplies some basic editing:
              - Gain envelope.
              - Gain overall.
            </summary>
        </member>
        <member name="T:AudioLib.ClipSampleProvider.StereoCoerce">
            <summary>How to handle stereo files.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._vals">
            <summary>The full buffer from client.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._currentIndex">
            <summary>Make this look like a streaam.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._currentGain">
            <summary>Gain while iterating samples.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._locker">
            <summary>The lock() target.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._envelope">
            <summary>Piecewise gain envelope. Key is index, value is gain.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.WaveFormat">
            <summary>The WaveFormat of this sample provider. ISampleProvider implementation.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.FileName">
            <summary>The associated file name. Empty if new.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.MasterGain">
            <summary>Overall gain applied to all samples.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.Length">
            <summary>Length of the clip in samples.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.Position">
            <summary>Position of the simulated stream as sample index.</summary>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(NAudio.Wave.ISampleProvider)">
            <summary>
            Constructor from a sample provider.
            </summary>
            <param name="provider">Format to use.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(NAudio.Wave.WaveFormat,System.Single[],System.String)">
            <summary>
            Constructor from a buffer.
            </summary>
            <param name="waveFormat">Format to use.</param>
            <param name="vals">The data to use.</param>
            <param name="fn">Maybe associated filename.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(System.String,AudioLib.ClipSampleProvider.StereoCoerce)">
            <summary>
            Constructor from a file. Deals with stereo files.
            </summary>
            <param name="fn">File to use.</param>
            <param name="mode">How to handle stereo files.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads samples from this sample provider with adjustments for envelope and overall gain.
            ISampleProvider implementation.
            </summary>
            <param name="buffer">Sample buffer.</param>
            <param name="offset">Offset into buffer.</param>
            <param name="count">Number of samples required.</param>
            <returns>Number of samples read.</returns>
        </member>
        <member name="M:AudioLib.PeakProvider.GetPeaks(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Get wave peak values for UI display.
            </summary>
            <param name="vals">Generate peaks from this.</param>
            <param name="startIndex">Where to start in source.</param>
            <param name="samplesPerPixel">UI resolution.</param>
            <param name="totalPixels">Where to stop.</param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.SwappableSampleProvider">
            <summary>Supports hot swapping of input.</summary>
        </member>
        <member name="F:AudioLib.SwappableSampleProvider._currentInput">
            <summary>The current input.</summary>
        </member>
        <member name="F:AudioLib.SwappableSampleProvider._locker">
            <summary>The lock() target.</summary>
        </member>
        <member name="P:AudioLib.SwappableSampleProvider.WaveFormat">
            <summary>The WaveFormat of this sample provider. ISampleProvider implementation.</summary>
        </member>
        <member name="M:AudioLib.SwappableSampleProvider.SetInput(NAudio.Wave.ISampleProvider)">
            <summary>
            Sets the input source.
            </summary>
            <param name="input">New input.</param>
        </member>
        <member name="M:AudioLib.SwappableSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads samples from this sample provider. ISampleProvider implementation.
            </summary>
            <param name="buffer">Sample buffer.</param>
            <param name="offset">Offset into buffer.</param>
            <param name="count">Number of samples required.</param>
            <returns>Number of samples read.</returns>
        </member>
        <member name="T:AudioLib.TimeBar">
            <summary>The control.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._lastXPos">
            <summary>For tracking mouse moves.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._toolTip">
            <summary>Tooltip for mousing.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._brush">
            <summary>The brush.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._penMarker">
            <summary>The pen.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._format">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.TimeBar.LARGE_CHANGE">
            <summary>Constant.</summary>
        </member>
        <member name="F:AudioLib.TimeBar.SMALL_CHANGE">
            <summary>Constant.</summary>
        </member>
        <member name="F:AudioLib.TimeBar.TS_FORMAT">
            <summary>For viewing purposes.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Current">
            <summary>Where we be now.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Length">
            <summary>Total length.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Start">
            <summary>One marker.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.End">
            <summary>Other marker.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.SnapMsec">
            <summary>Snap to this increment value.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.ProgressColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.MarkerColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.FontLarge">
            <summary>Big font.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.FontSmall">
            <summary>Baby font.</summary>
        </member>
        <member name="E:AudioLib.TimeBar.CurrentTimeChanged">
            <summary>Value changed by user.</summary>
        </member>
        <member name="M:AudioLib.TimeBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AudioLib.TimeBar.IncrementCurrent(System.Int32)">
            <summary>
            Update current time.
            </summary>
            <param name="msec"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the slider.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle selection operations.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Hook to intercept keys.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse position changes.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle dragging.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.GetTimeFromMouse(System.Int32)">
            <summary>
            Convert x pos to TimeSpan.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:AudioLib.TimeBar.DoSnap(System.Int32)">
            <summary>
            Snap to user preference.
            </summary>
            <param name="msec"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeBar.Constrain(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Utility helper function.
            </summary>
            <param name="val"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeBar.Scale(System.TimeSpan)">
            <summary>
            Map from time to UI pixels.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="F:AudioLib.WaveViewer._pen">
            <summary>For drawing.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._penMarker">
            <summary>For drawing.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._textFont">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._format">
            <summary>For drawing text.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.Values">
            <summary>The full buffer from client.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.DrawColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.Marker">
            <summary>Marker index.</summary>
        </member>
        <member name="M:AudioLib.WaveViewer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AudioLib.WaveViewer.Reset">
            <summary>
            Hard reset.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the waveform.
            </summary>
        </member>
    </members>
</doc>
