<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AudioLib</name>
    </assembly>
    <members>
        <member name="T:AudioLib.StereoCoercion">
            <summary>How to handle stereo files.</summary>
        </member>
        <member name="T:AudioLib.WaveSelectionMode">
            <summary>How to select.</summary>
        </member>
        <member name="T:AudioLib.SnapType">
            <summary>How to snap.</summary>
        </member>
        <member name="T:AudioLib.Property">
            <summary>Notification type.</summary>
        </member>
        <member name="T:AudioLib.IConverterOps">
            <summary>Abstraction of selection mode.</summary>
        </member>
        <member name="P:AudioLib.Globals.ConverterOps">
            <summary>Global mode.</summary>
        </member>
        <member name="P:AudioLib.Globals.BPM">
            <summary>Global tempo if using Beat selection mode.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.AUDIO_FILE_TYPES">
            <summary>Supported types.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.VOLUME_MIN">
            <summary>NAudio doesn't publish this for their API.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.VOLUME_MAX">
            <summary>NAudio doesn't publish this for their API.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.MAX_GAIN">
            <summary>Maximum gain.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.SAMPLE_RATE">
            <summary>Everything internal.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.READ_BUFF_SIZE">
            <summary>Stream buffer size.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.TS_FORMAT">
            <summary>Standard formatting.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.MAX_CLIP_SIZE">
            <summary>Max clip size in minutes. Can be overriden in settings.</summary>
        </member>
        <member name="T:AudioLib.AudioFileInfo">
            <summary>Borrowed from NAudio.</summary>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetFileInfo(System.String,System.Boolean)">
            <summary>
            Top level function to get file info.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoMp3(System.String,System.Boolean)">
            <summary>
            Get info for mp3 file.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoWav(System.String,System.Boolean)">
            <summary>
            Get info for wav file.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoSf(System.String,System.Boolean)">
            <summary>
            Get info for soundfonts.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoOther(System.String,System.Boolean)">
            <summary>
            Get info for other file types. Maybe.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.FormatWaveFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Helper.
            </summary>
            <param name="wf"></param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.AudioPlayer">
            <summary>A simple audio file player.</summary>
        </member>
        <member name="F:AudioLib.AudioPlayer._waveOut">
            <summary>Wave output play device.</summary>
        </member>
        <member name="E:AudioLib.AudioPlayer.PlaybackStopped">
            <summary>Wave playing done.</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Valid">
            <summary>Are we ok?</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Volume">
            <summary>Volume.</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Playing">
            <summary>State.</summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.#ctor(System.String,System.Int32,NAudio.Wave.ISampleProvider)">
            <summary>
            Normal constructor.
            </summary>
            <param name="wavOutDevice">Device name.</param>
            <param name="latency">How slow.</param>
            <param name="smpl">Provider.</param>
        </member>
        <member name="M:AudioLib.AudioPlayer.Dispose">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.Run(System.Boolean)">
            <summary>
            Start/stop everything.
            </summary>
            <param name="go">Or no.</param>
        </member>
        <member name="M:AudioLib.AudioPlayer.WaveOut_PlaybackStopped(System.Object,NAudio.Wave.StoppedEventArgs)">
            <summary>
            Usually end of file but could be error. Client can handle.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:AudioLib.AudioSettings.LibSettings">
            <summary>Current audio settings. Client must set this before accessing!</summary>
        </member>
        <member name="T:AudioLib.FixedListTypeConverter">
            <summary>Converter for selecting property value from known lists.</summary>
        </member>
        <member name="T:AudioLib.BarOps">
            <summary>Converters for musical time. 0-based not traditional 1-based.</summary>
        </member>
        <member name="T:AudioLib.BarOps.BarDesc">
            <summary>Convenience container for internal use.</summary>
        </member>
        <member name="M:AudioLib.BarOps.SnapSample(System.Int32,AudioLib.SnapType)">
            <summary>
            
            </summary>
            <param name="sample"></param>
            <param name="snap"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.BarOps.TextToSample(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.BarOps.Format(System.Int32)">
            <summary>
            Human readable.
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.BarOps.TextToSubdiv(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.BarOps.SubdivToSample(System.Int32)">
            <summary>
            
            </summary>
            <param name="subdiv"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.BarOps.SampleToSubdiv(System.Int32)">
            <summary>
            
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.BarOps.SampleToBar(System.Int32)">
            <summary>
            
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.BarOps.TextToBar(System.String)">
            <summary>
            Parser.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.ClipSampleProvider">
            <summary>
            Provider that encapsulates a client supplied audio data subset. When constructed, it reads in the
            entire file. Does sample rate conversion if needed.
            Mono output only - coerces stereo input per client call. Can be used for splitting stereo files.
            If you need stereo, use AudioFileReader.
            </summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._vals">
            <summary>The full buffer from client.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._position">
            <summary>Make this class look like a stream.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.WaveFormat">
            <inheritdoc />
        </member>
        <member name="P:AudioLib.ClipSampleProvider.FileName">
            <summary>The associated file name. Empty if new.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.Gain">
            <summary>Overall gain applied to all samples.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.SamplesPerChannel">
            <summary>The number of samples per channel or -1 if unknown.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.TotalTime">
            <summary>The total time in msec.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.Position">
            <summary>The current stream position.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.CurrentTime">
            <summary>The current time.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.SelStart">
            <summary>Selection start sample.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.SelLength">
            <summary>Selection length in samples.</summary>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.ToString">
            <summary>Get provider info. Mainly for window header.</summary>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(NAudio.Wave.ISampleProvider,AudioLib.StereoCoercion)">
            <summary>
            Constructor from a sample provider. Coerces stereo to mono.
            </summary>
            <param name="source">Source provider to use.</param>
            <param name="mode">How to handle stereo files.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(System.Single[])">
            <summary>
            Constructor from a buffer. Mono only.
            </summary>
            <param name="vals">The data to use.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(System.String,AudioLib.StereoCoercion)">
            <summary>
            Constructor from a file. Coerces stereo to mono.
            </summary>
            <param name="fn">File to use.</param>
            <param name="mode">How to handle stereo files.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads samples from this sample provider with adjustments for gain.
            Honors user selection if specified.
            ISampleProvider implementation.
            </summary>
            <param name="buffer">Sample buffer.</param>
            <param name="offset">Offset into buffer.</param>
            <param name="count">Number of samples requested.</param>
            <returns>Number of samples read.</returns>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.Rewind">
            <summary>
            Go back to the beginning.
            </summary>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.ReadSource(NAudio.Wave.ISampleProvider,AudioLib.StereoCoercion)">
            <summary>
            Common buff loader. Coerces stereo to mono per client request.
            </summary>
            <param name="source">Source provider to use.</param>
            <param name="mode">How to handle stereo files.</param>
        </member>
        <member name="T:AudioLib.NAudioEx">
            <summary>
            Extensions to enhance core NAudio for this application.
            TODO A lot of these are kind of clunky but the alternative is to add some new functionality
            to ISampleprovider. Maybe I'll branch NAudio some day.
            </summary>
        </member>
        <member name="M:AudioLib.NAudioEx.ReadAll(NAudio.Wave.ISampleProvider)">
            <summary>
            Make a buffer from the provider contents. Mono only.
            </summary>
            <param name="prov">The provider.</param>
            <returns>Values.</returns>
        </member>
        <member name="M:AudioLib.NAudioEx.Validate(NAudio.Wave.ISampleProvider,System.Boolean)">
            <summary>
            Sanity check for only 32bit fp, 44100Hz, mono.
            </summary>
            <param name="prov">Format to check.</param>
            <param name="mono">Must be mono.</param>
        </member>
        <member name="M:AudioLib.NAudioEx.Resample(System.String,System.String)">
            <summary>
            Resample to a new wav file.
            </summary>
            <param name="fn">The current filename</param>
            <param name="newfn">The new filename</param>
        </member>
        <member name="M:AudioLib.NAudioEx.Export(NAudio.Wave.ISampleProvider,System.String)">
            <summary>
            Export wave data to csv file.
            </summary>
            <param name="prov">Data source.</param>
            <param name="exportFileName"></param>
        </member>
        <member name="M:AudioLib.NAudioEx.SetPosition(NAudio.Wave.ISampleProvider,System.Int32)">
            <summary>
            Agnostic stream position setter.
            </summary>
            <param name="prov"></param>
            <param name="pos"></param>
        </member>
        <member name="M:AudioLib.NAudioEx.GetPosition(NAudio.Wave.ISampleProvider)">
            <summary>
            Agnostic stream position getter.
            </summary>
            <param name="prov"></param>
        </member>
        <member name="M:AudioLib.NAudioEx.GetTotalTime(NAudio.Wave.ISampleProvider)">
            <summary>
            Agnostic property.
            </summary>
            <param name="prov"></param>
            <returns>The duration in msec.</returns>
        </member>
        <member name="M:AudioLib.NAudioEx.GetCurrentTime(NAudio.Wave.ISampleProvider)">
            <summary>
            Agnostic property.
            </summary>
            <param name="prov"></param>
            <returns>The duration in msec.</returns>
        </member>
        <member name="M:AudioLib.NAudioEx.GetSamplesPerChannel(NAudio.Wave.ISampleProvider)">
            <summary>
            Agnostic property.
            </summary>
            <param name="prov"></param>
            <returns>The number of samples per channel or -1 if unknown.</returns>
        </member>
        <member name="M:AudioLib.NAudioEx.GetInfoString(NAudio.Wave.ISampleProvider)">
            <summary>
            Get provider info. Mainly for window header.
            </summary>
            <param name="prov"></param>
            <returns>Info chunks.</returns>
        </member>
        <member name="T:AudioLib.NullSampleProvider">
            <summary>
            Sample provider that does nothing.
            </summary>
        </member>
        <member name="P:AudioLib.NullSampleProvider.WaveFormat">
            <inheritdoc />
        </member>
        <member name="M:AudioLib.NullSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AudioLib.PeakProvider">
            <summary>
            Customized version of NAudio's IPeakProvider family.
            </summary>
        </member>
        <member name="M:AudioLib.PeakProvider.GetPeaks(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Get wave peak values for UI display.
            </summary>
            <param name="vals">Generate peaks from this.</param>
            <param name="startIndex">Where to start in source.</param>
            <param name="samplesPerPixel">UI resolution.</param>
            <param name="totalPixels">Where to stop.</param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.SampleOps">
            <summary>Converters for samples.</summary>
        </member>
        <member name="M:AudioLib.SampleOps.SnapSample(System.Int32,AudioLib.SnapType)">
            <summary>
            Snap sample to 10000 or 1000 or none.
            </summary>
            <param name="sample"></param>
            <param name="snap"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.SampleOps.TextToSample(System.String)">
            <summary>
            Parse a sample text.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.SampleOps.Format(System.Int32)">
            <summary>
            Human readable.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AudioLib.SwappableSampleProvider">
            <summary>
            Sample provider that supports hot swapping of input. Mainly used to supply input to
            WaveOut which doesn't like having its input switched.
            Takes stereo or mono input, output is always stereo.
            </summary>
        </member>
        <member name="F:AudioLib.SwappableSampleProvider._currentInput">
            <summary>The current input.</summary>
        </member>
        <member name="P:AudioLib.SwappableSampleProvider.WaveFormat">
            <summary>ISampleProvider implementation.</summary>
        </member>
        <member name="M:AudioLib.SwappableSampleProvider.SetInput(NAudio.Wave.ISampleProvider)">
            <summary>
            Sets the input source.
            </summary>
            <param name="input">New input or null to disable.</param>
        </member>
        <member name="M:AudioLib.SwappableSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads samples from this sample provider.
            ISampleProvider implementation.
            </summary>
            <param name="buffer">Sample buffer.</param>
            <param name="offset">Offset into buffer.</param>
            <param name="count">Number of samples requested.</param>
            <returns>Number of samples read.</returns>
        </member>
        <member name="T:AudioLib.TimeBar">
            <summary>The control.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._lastXPos">
            <summary>For tracking mouse moves.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._toolTip">
            <summary>Tooltip for mousing.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._format">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.TimeBar.LARGE_CHANGE">
            <summary>Constant.</summary>
        </member>
        <member name="F:AudioLib.TimeBar.SMALL_CHANGE">
            <summary>Constant.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Current">
            <summary>Where we be now.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Length">
            <summary>Total length.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Marker1">
            <summary>One marker.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Marker2">
            <summary>Other marker.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.SnapMsec">
            <summary>Snap to this increment value.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.ProgressColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.MarkerColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.FontLarge">
            <summary>Big font.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.FontSmall">
            <summary>Baby font.</summary>
        </member>
        <member name="E:AudioLib.TimeBar.CurrentTimeChanged">
            <summary>Value changed by user.</summary>
        </member>
        <member name="M:AudioLib.TimeBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AudioLib.TimeBar.IncrementCurrent(System.Int32)">
            <summary>
            Update current time.
            </summary>
            <param name="msec"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the slider.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle selection operations.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Hook to intercept keys.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse position changes.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle dragging.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.GetTimeFromMouse(System.Int32)">
            <summary>
            Convert x pos to TimeSpan.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:AudioLib.TimeBar.DoSnap(System.Int32)">
            <summary>
            Snap to user preference.
            </summary>
            <param name="msec"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeBar.Constrain(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Utility helper function.
            </summary>
            <param name="val"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeBar.Scale(System.TimeSpan)">
            <summary>
            Map from time to UI pixels.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.TimeOps">
            <summary>Converters for audio time.</summary>
        </member>
        <member name="T:AudioLib.TimeOps.TimeDesc">
            <summary>Convenience container for internal use.</summary>
        </member>
        <member name="M:AudioLib.TimeOps.SnapSample(System.Int32,AudioLib.SnapType)">
            <summary>
            
            </summary>
            <param name="sample"></param>
            <param name="snap"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeOps.TextToSample(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeOps.Format(System.Int32)">
            <summary>
            Human readable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeOps.MsecToSample(System.Single)">
            <summary>
            
            </summary>
            <param name="msec"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeOps.SampleToMsec(System.Int32)">
            <summary>
            
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeOps.SampleToTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeOps.TextToMsec(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeOps.TextToTime(System.String)">
            <summary>
            Parser.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.WaveViewer">
            <summary>Simple mono wave display.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._viewMode">
            <summary>Function set.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._textFont">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._textBrush">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._format">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._vals">
            <summary>The data buffer.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._min">
            <summary>Extent of _vals.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._max">
            <summary>Extent of _vals.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._samplesPerPixel">
            <summary>For painting. Essentially the zoom factor.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._lastXPos">
            <summary>Last pixel.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._snap">
            <summary>How to snap.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer.GAIN_INCREMENT">
            <summary>UI gain adjustment.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer.WHEEL_RESOLUTION">
            <summary>Scroll rate. Smaller means faster.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer.ZOOM_RATIO">
            <summary>Zoom ratio.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer.PAN_INCREMENT">
            <summary>Number of pixels to x pan by.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.DrawColor">
            <summary>The waveform color.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.GridColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.MarkColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.Gain">
            <summary>Client gain adjustment.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.Length">
            <summary>Length of the clip in samples.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.TotalTime">
            <summary>Length of the clip in msec.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.SelStart">
            <summary>Selection start sample.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.SelLength">
            <summary>Selection length in samples.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.Marker">
            <summary>General purpose marker location.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.VisibleStart">
            <summary>Visible start sample.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.VisibleLength">
            <summary>Visible length in samples. Always positive.</summary>
        </member>
        <member name="E:AudioLib.WaveViewer.ViewerChangeEvent">
            <summary>Value changed by user. Notify owner for display.</summary>
        </member>
        <member name="M:AudioLib.WaveViewer.#ctor">
            <summary>
            Default constructor. Mainly for designer.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.Init(NAudio.Wave.ISampleProvider,System.Boolean)">
            <summary>
            Set everything from data source. Client must do this before setting properties as some are overwritten.
            </summary>
            <param name="prov">Source</param>
            <param name="simple">If true simple display only.</param>
        </member>
        <member name="M:AudioLib.WaveViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AudioLib.WaveViewer.FitGain">
            <summary>
            Fit the wave exactly.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.ResetGain">
            <summary>
            Go to unity gain.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.Recenter(System.Int32)">
            <summary>
            Pan to new center location.
            </summary>
            <param name="sample">Center around this.</param>
        </member>
        <member name="M:AudioLib.WaveViewer.UpdateProperty(AudioLib.Property,System.String)">
            <summary>
            Owner is updating a property. This does conversion and syntax checking for the client.
            </summary>
            <param name="change">The property</param>
            <param name="val">The new value</param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:AudioLib.WaveViewer.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse wheel.
             - If ctrl, X zoom.
             - If shift, Y gain.
             - Else X pan.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse clicks to select things.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse move. Just for tooltip currently.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key press.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnResize(System.EventArgs)">
            <summary>
            Resize handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the waveform. In simple mode support just the waveform with no zoom, pan, etc.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.CheckSel">
            <summary>
            Do a few sanity checks.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.ResetView">
            <summary>
            
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.PixelToSample(System.Int32)">
            <summary>
            Convert x pos to sample index.
            </summary>
            <param name="pixel">UI location.</param>
            <returns>The sample or -1 if not visible.</returns>
        </member>
        <member name="M:AudioLib.WaveViewer.SampleToPixel(System.Int32)">
            <summary>
            Find sample visible location.
            </summary>
            <param name="sample"></param>
            <returns>The pixel or -1 if not visible.</returns>
        </member>
        <member name="M:AudioLib.WaveViewer.MouseX">
            <summary>
            Helper.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
