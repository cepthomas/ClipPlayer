<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AudioLib</name>
    </assembly>
    <members>
        <member name="F:AudioLib.AudioLibDefs.AUDIO_FILE_TYPES">
            <summary>Supported types.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.VOLUME_MIN">
            <summary>NAudio doesn't publish this for their API.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.VOLUME_MAX">
            <summary>NAudio doesn't publish this for their API.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.READ_BUFF_SIZE">
            <summary>Internal buffer size.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.TS_FORMAT">
            <summary>For viewing purposes.</summary>
        </member>
        <member name="F:AudioLib.AudioLibDefs.SAMPLE_RATE">
            <summary>Everything internal.</summary>
        </member>
        <member name="T:AudioLib.StereoCoercion">
            <summary>How to handle stereo files.</summary>
        </member>
        <member name="M:AudioLib.AudioLibUtils.TimeToSample(System.TimeSpan)">
            <summary>
            Conversion function.
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioLibUtils.MsecToSample(System.Single)">
            <summary>
            Conversion function.
            </summary>
            <param name="msec"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioLibUtils.SampleToTime(System.Int32)">
            <summary>
            Conversion function.
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioLibUtils.SampleToMsec(System.Int32)">
            <summary>
            Conversion function.
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.AudioFileInfo">
            <summary>Borrowed from NAudio.</summary>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetFileInfo(System.String,System.Boolean)">
            <summary>
            Top level function to get file info.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoMp3(System.String,System.Boolean)">
            <summary>
            Get info for mp3 file.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoWav(System.String,System.Boolean)">
            <summary>
            Get info for wav file.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoSf(System.String,System.Boolean)">
            <summary>
            Get info for soundfonts.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.GetInfoOther(System.String,System.Boolean)">
            <summary>
            Get info for other file types. Maybe.
            </summary>
            <param name="fileName"></param>
            <param name="verbose"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.AudioFileInfo.FormatWaveFormat(NAudio.Wave.WaveFormat)">
            <summary>
            Helper.
            </summary>
            <param name="wf"></param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.AudioPlayer">
            <summary>A simple audio file player.</summary>
        </member>
        <member name="F:AudioLib.AudioPlayer._waveOut">
            <summary>Wave output play device.</summary>
        </member>
        <member name="E:AudioLib.AudioPlayer.PlaybackStopped">
            <summary>Wave playing done.</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Valid">
            <summary>Are we ok?</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Volume">
            <summary>Volume.</summary>
        </member>
        <member name="P:AudioLib.AudioPlayer.Playing">
            <summary>State.</summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.#ctor(System.String,System.Int32,NAudio.Wave.ISampleProvider)">
            <summary>
            Normal constructor.
            </summary>
            <param name="wavOutDevice">Device name.</param>
            <param name="latency">How slow.</param>
            <param name="smpl">Provider.</param>
        </member>
        <member name="M:AudioLib.AudioPlayer.Dispose">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.Run(System.Boolean)">
            <summary>
            Start/stop everything.
            </summary>
            <param name="go">Or no.</param>
        </member>
        <member name="M:AudioLib.AudioPlayer.Rewind">
            <summary>
            Go back jack.
            </summary>
        </member>
        <member name="M:AudioLib.AudioPlayer.WaveOut_PlaybackStopped(System.Object,NAudio.Wave.StoppedEventArgs)">
            <summary>
            Usually end of file but could be error. Client can handle.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:AudioLib.AudioSettings.LibSettings">
            <summary>Current audio settings. Client must set this before accessing!</summary>
        </member>
        <member name="T:AudioLib.FixedListTypeConverter">
            <summary>Converter for selecting property value from known lists.</summary>
        </member>
        <member name="T:AudioLib.ClipSampleProvider">
            <summary>
            Provider that encapsulates a client supplied audio data subset. When constructed, it reads in the
            entire file. Does sample rate conversion if needed.
            Mono output only - coerces stereo input per client call. Can be used for splitting stereo files.
            If you need stereo, use AudioFileReader.
            Supplies some basic editing: TODO put in WaveViewer? WaveEditor?
              - Gain envelope.
              - Gain overall.
            </summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._vals">
            <summary>The full buffer from client.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._position">
            <summary>Make this class look like a stream.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._currentGain">
            <summary>Gain while iterating samples.</summary>
        </member>
        <member name="F:AudioLib.ClipSampleProvider._envelope">
            <summary>Piecewise gain envelope. Key is index, value is gain.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.WaveFormat">
            <summary>The WaveFormat of this sample provider. Fixed to mono. ISampleProvider implementation.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.FileName">
            <summary>The associated file name. Empty if new.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.MasterGain">
            <summary>Overall gain applied to all samples.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.Length">
            <summary>Length of the clip in samples.</summary>
        </member>
        <member name="P:AudioLib.ClipSampleProvider.TotalTime">
            <summary>Length of the clip in seconds.</summary>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(NAudio.Wave.ISampleProvider,AudioLib.StereoCoercion)">
            <summary>
            Constructor from a sample provider. Coerces stereo to mono.
            </summary>
            <param name="source">Source provider to use.</param>
            <param name="mode">How to handle stereo files.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(System.Single[])">
            <summary>
            Constructor from a buffer. Mono only.
            </summary>
            <param name="vals">The data to use.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.#ctor(System.String,AudioLib.StereoCoercion)">
            <summary>
            Constructor from a file. Coerces stereo to mono.
            </summary>
            <param name="fn">File to use.</param>
            <param name="mode">How to handle stereo files.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads samples from this sample provider with adjustments for envelope and overall gain.
            ISampleProvider implementation.
            </summary>
            <param name="buffer">Sample buffer.</param>
            <param name="offset">Offset into buffer.</param>
            <param name="count">Number of samples required.</param>
            <returns>Number of samples read.</returns>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.SetGain(System.Int32,System.Single)">
            <summary>
            If in _envelope, update else add. If 0, remove.
            </summary>
            <param name="sampleIndex">Inflection.</param>
            <param name="gain">Gain.</param>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.Reset">
            <summary>
            Go back to the beginning.
            </summary>
        </member>
        <member name="M:AudioLib.ClipSampleProvider.ReadSource(NAudio.Wave.ISampleProvider,AudioLib.StereoCoercion)">
            <summary>
            Common buff loader. Coerces stereo to mono per client request.
            </summary>
            <param name="source">Source provider to use.</param>
            <param name="mode">How to handle stereo files.</param>
        </member>
        <member name="T:AudioLib.NAudioEx">
            <summary>
            Extensions to enhance or extend core NAudio.
            </summary>
        </member>
        <member name="M:AudioLib.NAudioEx.ReadAll(NAudio.Wave.ISampleProvider)">
            <summary>
            Make a buffer from the provider contents. Mono only.
            </summary>
            <param name="prov">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.NAudioEx.Reset(NAudio.Wave.ISampleProvider)">
            <summary>
            Agnostic position setter.
            </summary>
            <param name="prov"></param>
        </member>
        <member name="M:AudioLib.NAudioEx.GetInfoString(NAudio.Wave.ISampleProvider)">
            <summary>
            Get provider info. Mainly for window header.
            </summary>
            <param name="prov"></param>
            <returns>Info chunks.</returns>
        </member>
        <member name="M:AudioLib.NAudioEx.GetInfo(NAudio.Wave.ISampleProvider)">
            <summary>
            Get provider info. Mainly for window header.
            </summary>
            <param name="prov"></param>
            <returns>Info chunks.</returns>
        </member>
        <member name="M:AudioLib.NAudioEx.Validate(NAudio.Wave.ISampleProvider,System.Boolean)">
            <summary>
            Sanity check for only 32bit fp, 44100Hz, mono.
            </summary>
            <param name="prov">Format to check.</param>
            <param name="mono">Must be mono.</param>
        </member>
        <member name="M:AudioLib.NAudioEx.Resample(NAudio.Wave.AudioFileReader)">
            <summary>
            Resample to a new reader compatible with this application.
            </summary>
            <param name="rdr"></param>
            <returns>The new file reader.</returns>
        </member>
        <member name="M:AudioLib.NAudioEx.Export(NAudio.Wave.ISampleProvider,System.String)">
            <summary>
            Export wave data to csv file.
            </summary>
            <param name="prov">Data source.</param>
            <param name="exportFileName"></param>
        </member>
        <member name="T:AudioLib.PeakProvider">
            <summary>
            Customized version of NAudio's IPeakProvider family.
            </summary>
        </member>
        <member name="M:AudioLib.PeakProvider.GetPeaks(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Get wave peak values for UI display.
            </summary>
            <param name="vals">Generate peaks from this.</param>
            <param name="startIndex">Where to start in source.</param>
            <param name="samplesPerPixel">UI resolution.</param>
            <param name="totalPixels">Where to stop.</param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.SwappableSampleProvider">
            <summary>
            Sample provider that supports hot swapping of input. Mainly used to supply input to
            WaveOut which doesn't like having its input switched.
            Takes stereo or mono input, output is always stereo.
            </summary>
        </member>
        <member name="F:AudioLib.SwappableSampleProvider._currentInput">
            <summary>The current input.</summary>
        </member>
        <member name="F:AudioLib.SwappableSampleProvider._vals">
            <summary>The current buffer.</summary>
        </member>
        <member name="F:AudioLib.SwappableSampleProvider._locker">
            <summary>The lock() target.</summary>
        </member>
        <member name="P:AudioLib.SwappableSampleProvider.WaveFormat">
            <summary>The fixed stereo WaveFormat of this sample provider. ISampleProvider implementation.</summary>
        </member>
        <member name="M:AudioLib.SwappableSampleProvider.SetInput(NAudio.Wave.ISampleProvider)">
            <summary>
            Sets the input source.
            </summary>
            <param name="input">New input.</param>
        </member>
        <member name="M:AudioLib.SwappableSampleProvider.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads samples from this sample provider. ISampleProvider implementation.
            </summary>
            <param name="buffer">Sample buffer.</param>
            <param name="offset">Offset into buffer.</param>
            <param name="count">Number of samples required.</param>
            <returns>Number of samples read.</returns>
        </member>
        <member name="T:AudioLib.TimeBar">
            <summary>The control.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._lastXPos">
            <summary>For tracking mouse moves.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._toolTip">
            <summary>Tooltip for mousing.</summary>
        </member>
        <member name="F:AudioLib.TimeBar._format">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.TimeBar.LARGE_CHANGE">
            <summary>Constant.</summary>
        </member>
        <member name="F:AudioLib.TimeBar.SMALL_CHANGE">
            <summary>Constant.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Current">
            <summary>Where we be now.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Length">
            <summary>Total length.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Marker1">
            <summary>One marker.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.Marker2">
            <summary>Other marker.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.SnapMsec">
            <summary>Snap to this increment value.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.ProgressColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.MarkerColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.FontLarge">
            <summary>Big font.</summary>
        </member>
        <member name="P:AudioLib.TimeBar.FontSmall">
            <summary>Baby font.</summary>
        </member>
        <member name="E:AudioLib.TimeBar.CurrentTimeChanged">
            <summary>Value changed by user.</summary>
        </member>
        <member name="M:AudioLib.TimeBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AudioLib.TimeBar.IncrementCurrent(System.Int32)">
            <summary>
            Update current time.
            </summary>
            <param name="msec"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the slider.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle selection operations.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Hook to intercept keys.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.TimeBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse position changes.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle dragging.
            </summary>
        </member>
        <member name="M:AudioLib.TimeBar.GetTimeFromMouse(System.Int32)">
            <summary>
            Convert x pos to TimeSpan.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:AudioLib.TimeBar.DoSnap(System.Int32)">
            <summary>
            Snap to user preference.
            </summary>
            <param name="msec"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeBar.Constrain(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Utility helper function.
            </summary>
            <param name="val"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:AudioLib.TimeBar.Scale(System.TimeSpan)">
            <summary>
            Map from time to UI pixels.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:AudioLib.WaveViewer">
            <summary>
            Simple mono wave display.
            </summary>
        </member>
        <member name="F:AudioLib.WaveViewer._textFont">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._format">
            <summary>For drawing text.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._vals">
            <summary>The data buffer.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer._position">
            <summary>Make this class look like a streaam.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer.MAX_GAIN">
            <summary>Maximum gain.</summary>
        </member>
        <member name="F:AudioLib.WaveViewer.GRID_STEP">
            <summary>Grid Y resolution. Assumes +-1.0f range.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.WaveFormat">
            <summary>Gets the WaveFormat of this Sample Provider. ISampleProvider implementation.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.DrawColor">
            <summary>The waveform color.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.GridColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.SelColor">
            <summary>For styling.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.Gain">
            <summary>Overall amplitude adjustment.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.Frozen">
            <summary>There isn't enough data to fill full width so disallow navigation.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.SelStart">
            <summary>Selection start.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.SelLength">
            <summary>Selection length. Could be negative.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.ViewCursor">
            <summary>Current cursor.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.VisStart">
            <summary>Visible start sample.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.VisLength">
            <summary>Visible length. Always positive.</summary>
        </member>
        <member name="T:AudioLib.WaveViewer.StatusEventArgs">
            <summary>WaveViewer has something to say or show.</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.StatusEventArgs.Gain">
            <summary>0 -> 100</summary>
        </member>
        <member name="P:AudioLib.WaveViewer.StatusEventArgs.Message">
            <summary>Some information.</summary>
        </member>
        <member name="M:AudioLib.WaveViewer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.Init(NAudio.Wave.ISampleProvider)">
            <summary>
            Set everything from data source. Do this before setting properties as some are overwritten.
            </summary>
            <param name="prov">Source</param>
        </member>
        <member name="M:AudioLib.WaveViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AudioLib.WaveViewer.Reset">
            <summary>Put back to area of interest.</summary>
        </member>
        <member name="M:AudioLib.WaveViewer.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Fill the buffer with selected data. ISampleProvider implementation.
            </summary>
            <param name="buffer">The buffer to fill with samples.</param>
            <param name="offset">Offset into buffer.</param>
            <param name="count">The number of samples to read.</param>
            <returns>the number of samples written to the buffer.</returns>
        </member>
        <member name="M:AudioLib.WaveViewer.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse wheel.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handle mouse move.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key press.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnResize(System.EventArgs)">
            <summary>
            Resize.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AudioLib.WaveViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the waveform.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.ValidateProperties">
            <summary>
            Check sanity of client selections.
            </summary>
        </member>
        <member name="M:AudioLib.WaveViewer.GetSampleFromMouse(System.Int32)">
            <summary>
            Convert x pos to sample index.
            </summary>
            <param name="x">UI loc or -1 if get current.</param>
        </member>
        <member name="M:AudioLib.WaveViewer.DoSnap(System.Int32)">
            <summary>
            Snap to user preference.
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
    </members>
</doc>
